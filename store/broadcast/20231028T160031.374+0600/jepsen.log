2023-10-28 16:00:31,392{GMT}	INFO	[jepsen test runner] jepsen.core: Command line:
lein run test -w broadcast --bin /Users/googrand/go/bin/maelstrom-broadcast --node-count 1 --time-limit 20 --rate 10
2023-10-28 16:00:31,438{GMT}	INFO	[jepsen test runner] jepsen.core: Running test:
{:args []
 :remote
 #jepsen.control.retry.Remote{:remote #jepsen.control.scp.Remote{:cmd-remote #jepsen.control.sshj.SSHJRemote{:concurrency-limit 6,
                                                                                                             :conn-spec nil,
                                                                                                             :client nil,
                                                                                                             :semaphore nil},
                                                                 :conn-spec nil},
                              :conn nil}
 :log-net-send false
 :node-count 1
 :availability nil
 :max-txn-length 4
 :concurrency 1
 :db
 #object[maelstrom.db$db$reify__16142
         "0x2a71d430"
         "maelstrom.db$db$reify__16142@2a71d430"]
 :max-writes-per-key 16
 :leave-db-running? false
 :name "broadcast"
 :logging-json? false
 :start-time
 #object[org.joda.time.DateTime "0x14021c10" "2023-10-28T16:00:31.374+06:00"]
 :nemesis-interval 10
 :net
 #object[maelstrom.net$jepsen_net$reify__15251
         "0x7dd4f726"
         "maelstrom.net$jepsen_net$reify__15251@7dd4f726"]
 :client
 #object[maelstrom.workload.broadcast$client$reify__16644
         "0xbf6de66"
         "maelstrom.workload.broadcast$client$reify__16644@bf6de66"]
 :barrier
 #object[java.util.concurrent.CyclicBarrier
         "0xff7042c"
         "java.util.concurrent.CyclicBarrier@ff7042c"]
 :log-stderr false
 :pure-generators true
 :ssh {:dummy? true}
 :rate 10.0
 :checker
 #object[jepsen.checker$compose$reify__11881
         "0xb917b5e"
         "jepsen.checker$compose$reify__11881@b917b5e"]
 :argv
 ("test"
  "-w"
  "broadcast"
  "--bin"
  "/Users/googrand/go/bin/maelstrom-broadcast"
  "--node-count"
  "1"
  "--time-limit"
  "20"
  "--rate"
  "10")
 :nemesis
 (jepsen.nemesis.ReflCompose
  {:fm {:start-partition 0,
        :stop-partition 0,
        :kill 1,
        :start 1,
        :pause 1,
        :resume 1},
   :nemeses [#unprintable "jepsen.nemesis.combined$partition_nemesis$reify__16416@5126c0cd"
             #unprintable "jepsen.nemesis.combined$db_nemesis$reify__16397@6c1e2161"]})
 :nodes ["n0"]
 :test-count 1
 :latency {:mean 0, :dist :constant}
 :bin "/Users/googrand/go/bin/maelstrom-broadcast"
 :generator
 ((jepsen.generator.Synchronize
   {:gen (jepsen.generator.TimeLimit
          {:limit 20000000000,
           :cutoff nil,
           :gen (jepsen.generator.Any
                 {:gens [(jepsen.generator.OnThreads
                          {:f #{:nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x3eea7c4b"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@3eea7c4b"],
                           :gen nil})
                         (jepsen.generator.OnThreads
                          {:f #jepsen.generator.context.AllBut{:element :nemesis},
                           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                                   "0x50d507ab"
                                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@50d507ab"],
                           :gen (jepsen.generator.Stagger
                                 {:dt 200000000,
                                  :next-time nil,
                                  :gen (jepsen.generator.Mix
                                        {:i 0,
                                         :gens [({:f :broadcast, :value 0}
                                                 {:f :broadcast, :value 1}
                                                 {:f :broadcast, :value 2}
                                                 {:f :broadcast, :value 3}
                                                 {:f :broadcast, :value 4}
                                                 {:f :broadcast, :value 5}
                                                 {:f :broadcast, :value 6}
                                                 {:f :broadcast, :value 7}
                                                 ...)
                                                ({:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 {:f :read}
                                                 ...)]})})})]})})})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #{:nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x2b960c2b"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@2b960c2b"],
           :gen ()})})
  (jepsen.generator.Synchronize
   {:gen {:type :log, :value "Waiting for recovery..."}})
  (jepsen.generator.Synchronize {:gen {:type :sleep, :value 10}})
  (jepsen.generator.Synchronize
   {:gen (jepsen.generator.OnThreads
          {:f #jepsen.generator.context.AllBut{:element :nemesis},
           :context-filter #object[jepsen.generator.context$make_thread_filter$lazy_filter__9167
                                   "0x46f32536"
                                   "jepsen.generator.context$make_thread_filter$lazy_filter__9167@46f32536"],
           :gen (jepsen.generator.EachThread
                 {:fresh-gen {:f :read, :final? true},
                  :context-filters #object[clojure.core$promise$reify__8591
                                           "0x3ee39a1c"
                                           {:status :pending, :val nil}],
                  :gens {}})})}))
 :log-net-recv false
 :os
 #object[maelstrom.net$jepsen_os$reify__15254
         "0x6921e251"
         "maelstrom.net$jepsen_os$reify__15254@6921e251"]
 :time-limit 20
 :workload :broadcast
 :consistency-models [:strict-serializable]
 :topology :grid}

2023-10-28 16:00:32,256{GMT}	INFO	[jepsen node n0] maelstrom.net: Starting Maelstrom network
2023-10-28 16:00:32,256{GMT}	INFO	[jepsen test runner] jepsen.db: Tearing down DB
2023-10-28 16:00:32,257{GMT}	INFO	[jepsen test runner] jepsen.db: Setting up DB
2023-10-28 16:00:32,258{GMT}	INFO	[jepsen node n0] maelstrom.service: Starting services: (lin-kv lin-tso lww-kv seq-kv)
2023-10-28 16:00:32,258{GMT}	INFO	[jepsen node n0] maelstrom.db: Setting up n0
2023-10-28 16:00:32,259{GMT}	INFO	[jepsen node n0] maelstrom.process: launching /Users/googrand/go/bin/maelstrom-broadcast []
2023-10-28 16:00:32,273{GMT}	WARN	[n0 stdout] maelstrom.process: Error!
clojure.lang.ExceptionInfo: Malformed network message. Node n0 tried to send the following message via STDOUT:

{:body {}}

This is malformed because:

{:src missing-required-key, :dest missing-required-key}

See doc/protocol.md for more guidance.
	at slingshot.support$stack_trace.invoke(support.clj:201)
	at maelstrom.process$parse_msg.invokeStatic(process.clj:57)
	at maelstrom.process$parse_msg.invoke(process.clj:35)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879$fn__15881.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878$fn__15879.invoke(process.clj:146)
	at maelstrom.process$stdout_thread$fn__15878.invoke(process.clj:140)
	at clojure.core$binding_conveyor_fn$fn__5823.invoke(core.clj:2047)
	at clojure.lang.AFn.call(AFn.java:18)
	at java.base/java.util.concurrent.FutureTask.run(FutureTask.java:317)
	at java.base/java.util.concurrent.ThreadPoolExecutor.runWorker(ThreadPoolExecutor.java:1144)
	at java.base/java.util.concurrent.ThreadPoolExecutor$Worker.run(ThreadPoolExecutor.java:642)
	at java.base/java.lang.Thread.run(Thread.java:1583)
2023-10-28 16:00:32,469{GMT}	INFO	[Jepsen shutdown hook] jepsen.core: Downloading DB logs before JVM shutdown...
